import time
import csv
import os
from datetime import datetime
from telegram import InlineKeyboardButton, InlineKeyboardMarkup, Update
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, MessageHandler, filters, ContextTypes
import random
from pytz import timezone

# üö® NOVAS BIBLIOTECAS PARA SCRAPING üö®
import requests
from bs4 import BeautifulSoup
# ------------------------------------

# ===================================================
# 1. CONFIGURA√á√ÉO
# ===================================================

TELEGRAM_BOT_TOKEN = os.environ.get("TELEGRAM_BOT_TOKEN")

# Define o fuso hor√°rio
TIMEZONE = timezone('UTC') 

# ===================================================
# 2. FUN√á√ïES DE DADOS E SCRAPING REAL
# ===================================================

def fetch_price_from_web(player_name):
    """
    Tenta extrair o pre√ßo de um jogador do Futwiz usando um termo de busca.
    
    RETORNA: (preco_em_moedas_int, site_fonte)
    """
    
    # Formata o nome para a URL (ex: "Kylian Mbapp√©" vira "kylian-mbappe")
    search_slug = player_name.lower().replace(" ", "-").replace(".", "").replace("'", "")
    
    # URL de exemplo do Futwiz para um jogador. 
    # ATEN√á√ÉO: √â preciso encontrar o ID correto no Futwiz para ser mais preciso!
    # Usaremos uma busca simples com um ID fixo para o teste inicial, 
    # pois buscar pelo nome completo √© complexo.
    if "mbappe" in search_slug:
        # Exemplo de URL de pre√ßo (pode n√£o funcionar 100% se o Futwiz mudar)
        url = "https://www.futwiz.com/en/fifa24/player/kylian-mbappe/12345" # Usando ID fict√≠cio de exemplo
    else:
        # Para jogadores que n√£o s√£o Mbapp√©, vamos usar um ID gen√©rico para simplificar
        # (Voc√™ precisar√° de uma l√≥gica de busca REAL aqui)
        url = f"https://www.futwiz.com/en/fifa24/player/{search_slug}/12345"

    headers = {
        'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36'
    }

    try:
        response = requests.get(url, headers=headers, timeout=10)
        response.raise_for_status() # Lan√ßa exce√ß√£o se o status for 4xx ou 5xx
        
        soup = BeautifulSoup(response.text, 'html.parser')
        
        # ‚ö†Ô∏è ESTE √â O PONTO CR√çTICO! Voc√™ deve inspecionar a p√°gina 
        # e encontrar a CLASSE ou o ID exato onde o pre√ßo est√°.
        # Este √© apenas um CHUTE baseado em estruturas comuns.
        price_element = soup.find('div', class_='pc-price') 
        
        if price_element:
            price_text = price_element.get_text(strip=True)
            
            # Limpa o texto: remove v√≠rgulas, pontos e 'K' (para milhares)
            cleaned_price = price_text.replace('k', '000').replace('.', '').replace(',', '').strip()
            
            # Tenta converter para inteiro. Se houver erro na limpeza, retorna a simula√ß√£o.
            try:
                final_price = int(cleaned_price)
                return final_price, "FUTWIZ (Real)"
            except ValueError:
                print(f"Erro de convers√£o ap√≥s limpeza: {cleaned_price}")
                return random.randint(1000000, 2000000), "FUTWIZ (Erro de Scraping)"

        else:
            return random.randint(1000000, 2000000), "FUTWIZ (Elemento n√£o Encontrado)"

    except requests.exceptions.RequestException as e:
        print(f"Erro na requisi√ß√£o web para {player_name}: {e}")
        return random.randint(1000000, 2000000), "FUTWIZ (Erro de Conex√£o)"


def registrar_historico(jogador, preco_moedas, preco_formatado):
    """Adiciona a busca do jogador ao arquivo CSV."""
    
    # ... (c√≥digo da fun√ß√£o registrar_historico permanece o mesmo) ...
    try:
        with open('pre√ßos_historico.csv', 'r', encoding='utf-8') as f:
            f.readline()
    except FileNotFoundError:
        try:
            with open('pre√ßos_historico.csv', 'w', newline='', encoding='utf-8') as file:
                writer = csv.writer(file)
                writer.writerow(['data_hora', 'jogador', 'preco_moedas', 'preco_formatado'])
        except Exception as e:
            print(f"Erro ao criar pre√ßos_historico.csv: {e}")
            return
        
    with open('pre√ßos_historico.csv', 'a', newline='', encoding='utf-8') as file:
        writer = csv.writer(file)
        
        now = datetime.now(TIMEZONE).strftime('%Y-%m-%d %H:%M:%S')
        
        writer.writerow([now, jogador, preco_moedas, preco_formatado])
        
    print(f"Hist√≥rico registrado: {jogador} | {preco_formatado}")


def get_top_5_players():
    """SIMULA a busca pelos 5 jogadores mais buscados. Voc√™ deve usar requests+BS4 aqui tamb√©m."""
    return [
        {"nome": "Kylian Mbapp√©", "id": "mbappe_id"},
        {"nome": "V. van Dijk", "id": "vvd_id"},
        {"nome": "E. Haaland", "id": "haaland_id"},
        {"nome": "L. Messi", "id": "messi_id"},
        {"nome": "Vini Jr.", "id": "vinijr_id"}
    ]


def get_player_price(search_term):
    """
    Fun√ß√£o principal que chama o scraping real.
    """
    
    # L√≥gica de formata√ß√£o de nome:
    if "_id" in search_term:
        player_name = search_term.replace("_id", "").title()
    else: 
        player_name = search_term.title()
    
    # üö® CHAMADA DO SCRAPING REAL üö®
    # Se o scraping falhar, ele retorna a simula√ß√£o (random)
    preco_num, source_site = fetch_price_from_web(player_name)
    
    # Captura o hor√°rio AGORA
    current_time_str = datetime.now(TIMEZONE).strftime('%H:%M:%S')
        
    # Formata√ß√£o do pre√ßo (ex: 1.500.000 moedas)
    preco_texto = f"{preco_num:,}".replace(",", "X").replace(".", ",").replace("X", ".") + " moedas"

    # REGISTRA A BUSCA NO CSV
    registrar_historico(player_name, preco_num, preco_texto)

    # Retorna todos os dados necess√°rios
    return {
        "player_name": player_name,
        "preco_num": preco_num,
        "price_message": f"O pre√ßo de **{player_name}** √©: **{preco_texto}**.",
        "time_now": current_time_str,
        "source_site": source_site
    }

# ... (Fun√ß√£o get_trade_tip, start_command, button_callback, handle_player_search e main permanecem as mesmas)
# O c√≥digo a seguir √© a continua√ß√£o do monitor.py

def get_trade_tip(jogador_nome, preco_atual_moedas):
    """L√™ o hist√≥rico e fornece uma dica simples de trade."""
    
    historico = []
    
    try:
        with open('pre√ßos_historico.csv', 'r', encoding='utf-8') as file:
            reader = csv.DictReader(file)
            for row in reader:
                if row['jogador'].upper() == jogador_nome.upper():
                    historico.append(row)
    except FileNotFoundError:
        return "Primeiro registro. Busque novamente mais tarde para comparar os pre√ßos!"

    
    if len(historico) > 1:
        ultimo_registro = historico[-2]
        try:
            preco_anterior = int(ultimo_registro['preco_moedas'])
        except ValueError:
             return "Erro ao ler pre√ßo anterior. Verifique o formato do CSV."

        diferenca = preco_atual_moedas - preco_anterior
        
        diferenca_formatada = f"{abs(diferenca):,}".replace(",", "X").replace(".", ",").replace("X", ".")
        
        if diferenca > 0:
            return f"‚¨ÜÔ∏è **{diferenca_formatada} moedas mais caro** que a √∫ltima busca ({ultimo_registro['data_hora']}). **PODE SER HORA DE VENDER!**"
        elif diferenca < 0:
            return f"‚¨áÔ∏è **{diferenca_formatada} moedas mais barato** que a √∫ltima busca ({ultimo_registro['data_hora']}). **PODE SER HORA DE COMPRAR!**"
        else:
            return "‚û°Ô∏è Pre√ßo est√°vel desde a √∫ltima busca."
    else:
        return "Primeiro registro. Busque novamente mais tarde para comparar os pre√ßos!"


# ===================================================
# 3. FUN√á√ïES DE DI√ÅLOGO DO TELEGRAM 
# ===================================================

async def start_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """Fun√ß√£o executada quando o usu√°rio digita /start."""
    top_players = get_top_5_players()
    keyboard = []
    
    for player in top_players:
        button = InlineKeyboardButton(player["nome"], callback_data=f'SEARCH:{player["id"]}')
        keyboard.append([button]) 

    keyboard.append([InlineKeyboardButton("üîé Buscar por Nome (Digite abaixo)", callback_data='SEARCH_TEXT')])
    reply_markup = InlineKeyboardMarkup(keyboard)

    await update.message.reply_text(
        'Ol√°! Qual jogador do EA FC 26 voc√™ quer pesquisar? Escolha um popular ou digite o nome:',
        reply_markup=reply_markup
    )


async def button_callback(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """Fun√ß√£o executada quando o usu√°rio clica em qualquer bot√£o inline."""
    query = update.callback_query
    await query.answer()

    action, value = query.data.split(':', 1)

    if action == 'SEARCH':
        result = get_player_price(value)
        trade_tip = get_trade_tip(result["player_name"], result["preco_num"])
        
        await query.edit_message_text(
            text=(
                f"‚úÖ **Busca por Jogador Popular**\n\n"
                f"{result['price_message']}\n\n"
                f"üïí Atualizado √†s **{result['time_now']} (UTC)**\n"
                f"üåê Fonte: **{result['source_site']}**\n"
                f"---\n"
                f"üìä **Dica de Trade:**\n{trade_tip}"
            ),
            parse_mode='Markdown'
        )

    elif action == 'SEARCH_TEXT':
        await query.edit_message_text(
            text="√ìtimo! Por favor, **digite o nome completo** do jogador que voc√™ procura abaixo.",
            parse_mode='Markdown'
        )


async def handle_player_search(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """Fun√ß√£o executada quando o usu√°rio digita um texto que n√£o √© um comando."""
    search_term = update.message.text.strip()
    
    result = get_player_price(search_term) 

    trade_tip = get_trade_tip(result["player_name"], result["preco_num"])

    await update.message.reply_text(
        (
            f"üîç **Resultado da sua busca:**\n\n"
            f"{result['price_message']}\n\n"
            f"üïí Atualizado √†s **{result['time_now']} (UTC)**\n"
            f"üåê Fonte: **{result['source_site']}**\n"
            f"---\n"
            f"üìä **Dica de Trade:**\n{trade_tip}"
        ),
        parse_mode='Markdown'
    )


# ===================================================
# 4. EXECU√á√ÉO
# ===================================================

def main() -> None:
    """Conecta o bot ao Telegram e inicia a escuta."""
    if not TELEGRAM_BOT_TOKEN:
        print("ERRO CR√çTICO: Token do Telegram n√£o encontrado! Verifique a vari√°vel de ambiente.")
        return
        
    application = Application.builder().token(TELEGRAM_BOT_TOKEN).build()

    # Handlers (Liga√ß√µes entre o Telegram e as nossas fun√ß√µes)
    application.add_handler(CommandHandler("start", start_command))
    application.add_handler(CallbackQueryHandler(button_callback))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_player_search))

    print("ü§ñ Bot iniciado e ouvindo...")
    application.run_polling(allowed_updates=Update.ALL_TYPES)


if __name__ == '__main__':
    # Garante que as bibliotecas necess√°rias para o scraping estejam instaladas
    try:
        __import__('pytz')
        __import__('requests')
        __import__('bs4')
    except ImportError as e:
        print(f"ERRO DE DEPEND√äNCIA: {e}. Por favor, instale: pip install -r requirements.txt --user")
    
    main()
